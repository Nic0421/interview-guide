// 这是您的 Prisma schema 文件
// 了解更多：https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id                  String              @id @default(uuid())
  name                String              @unique
  email               String              @unique
  questions           UserQuestionState[]
  quizzes             Quiz[]
  errorCollections    ErrorCollection[]
  totalScore          Int                 @default(0)
  completedQuestions  Int                 @default(0)
  totalQuizzesTaken   Int                 @default(0)
  lastQuizScore       Int?
  lastQuizCompletedAt DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// 题目模型
model Question {
  id             Int                 @id @default(autoincrement())
  content        String
  answer         String
  difficulty     Int
  categoryId     Int
  questionTypeId Int
  category       Category            @relation(fields: [categoryId], references: [id])
  questionType   QuestionType        @relation(fields: [questionTypeId], references: [id])
  userStates     UserQuestionState[]
  quizQuestions  QuizQuestion[]
  tags           TagsOnQuestions[]
  tips           String[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([categoryId, questionTypeId])
}

// 分类模型
model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// 问题类型模型
model QuestionType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// 用户题目状态模型
model UserQuestionState {
  userId            String
  questionId        Int
  status            String
  isCorrect         Boolean
  lastAttemptAt     DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id])
  question          Question         @relation(fields: [questionId], references: [id])
  errorCollection   ErrorCollection? @relation(fields: [errorCollectionId], references: [id])
  errorCollectionId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@id([userId, questionId])
  @@index([userId, status])
}

// 测验模型
model Quiz {
  id            Int            @id @default(autoincrement())
  userId        String
  score         Int?
  completedAt   DateTime?
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  quizQuestions QuizQuestion[]
}

// 测验题目模型
model QuizQuestion {
  quizId     Int
  questionId Int
  userAnswer String?
  isCorrect  Boolean
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([quizId, questionId])
}

// 标签模型
model Tag {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  questions TagsOnQuestions[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// 题目标签关联模型
model TagsOnQuestions {
  tagId      Int
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@id([tagId, questionId])
}

// 错题集模型
model ErrorCollection {
  id        Int                 @id @default(autoincrement())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  questions UserQuestionState[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}
